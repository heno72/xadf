#!/bin/bash
###############################################################################
#
#   xadf
#   Copyright (C) 2023  Hendrik Lie
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#   Author: Hendrik Lie
#   Email : <hendriklie@gmail.com>
#
###############################################################################
#
# SUMMARY
# This is essentially our dotfiles repo controller. It can also function as an
# installer script: downloading the entire repo, sets up alias, append source
# directive to .bashrc, and syncs all contents from dotfiles to $HOME. When
# called, it can also function as an alias for git with separate home dir,
# where the git directory is set at either $HOME/xadf or somewhere that is
# specified with --seat at install time.
#
###############################################################################
#
# A bash script to control and manage xa-dotfiles (xadf) in a home folder with
# bare git methods. When called without its native arguments, act as an alias
# of git --git-dir=$xadfdir --work-tree=$HOME
#
###############################################################################

# Define state variables
version="2023-02-16"
is_heno=0
build_recipe=0
build_xadfrc=0
install_mode=0
install_seat="$HOME/xadf"
install_branch="trunk"
xadf_https_repo="https://gitlab.com/heno72/xadf.git"

# Make necessary directories
test ! -d ~/.config && mkdir ~/.config
test ! -d ~/.config/xadf && mkdir ~/.config/xadf
test ! -d ~/.local && mkdir ~/.local
test ! -d ~/.local/xadf && mkdir ~/.local/xadf

xadf_build_recipe(){
# builds recipe
printf "[xadf]: Generate recipe...\n"
cat ~/.local/xadf/default-recipe.txt > ~/.config/xadf/recipe.txt
if test $? -gt 0
then
	printf "[xadf]: FAIL\n"
	exit 4
else
	printf "[xadf]: DONE\n"
fi
}

xadf_build_xadfrc(){
# builds xadfrc
printf "[xadf]: Generate xadfrc...\n"
. ~/.local/xadf/template-xadfrc | sed "s#$HOME#\$HOME#" > ~/.config/xadf/xadfrc
if test $? -gt 0
then
	printf "[xadf]: FAIL\n"
	exit 5
else
	printf "[xadf]: DONE\n"
fi
}

xadf_install(){
# installs xadf
printf "[xadf]: installing xadf\n"
printf "[xadf]: seat is '%s'\n" "$install_seat"
printf "[xadf]: branch is '%s'\n" "$install_branch"

# 1. Replicate from xadf git repository with separate git configuration.
#    It will also specify a temporary location $HOME/.xadf-tmp to store
#    all contents of the repo. If --seat is set, replicate git directory
#    to the specified location. Otherwise, replicate git directory to
#    $HOME/xadf
printf "[xadf]: Clone from repo '%s'...\n" "$xadf_https_repo"
git clone --separate-git-dir="$install_seat" "$xadf_https_repo" ~/.xadf-tmp
if test $? -gt 0
then
	printf "[xadf]: FAIL! cleaning up...\n"
	rm -rf "$install_seat" ~/.xadf-tmp
	exit 6
else
	printf "[xadf]: DONE\n"
fi

# 2. Switch working directory to temporary working directory
printf "[xadf]: Switch working directory to '~/.xadf-tmp'...\n"
pushd ~/.xadf-tmp
if test $? -gt 0
then
	printf "[xadf]: FAIL\n"
	exit 7
else
	printf "[xadf]: DONE\n"
fi

# 3. If --branch is set, checks out to branch NAME
printf "[xadf]: Checks out to branch '%s'...\n" "$install_branch"
git --git-dir="$install_seat" --work-tree="$HOME" checkout "$install_branch"
if test $? -gt 0
then
	printf "[xadf]: FAIL\n"
	exit 8
else
	printf "[xadf]: DONE\n"
fi

# 4. rsync all contents of $HOME/.xadf-tmp/ except '.git' to $HOME
printf "[xadf]: Syncing repo to '%s'...\n" "$HOME"
rsync --recursive --verbose --exclude '.git' "$HOME/.xadf-tmp/" "$HOME/"
if test $? -gt 0
then
	printf "[xadf]: FAIL\n"
	exit 9
else
	printf "[xadf]: DONE\n"
fi

# 5. Removes $HOME/.xadf-tmp/
printf "[xadf]: Returns to '%s'...\n" "$HOME"
popd
if test $? -gt 0
then
	printf "[xadf]: FAIL\n"
	exit 10
else
	printf "[xadf]: DONE\n"
fi

printf "[xadf]: Deletes temporary working directory '~/.xadf-tmp'...\n"
rm -rf "~/.xadf-tmp"
if test $? -gt 0
then
	printf "[xadf]: FAIL\n"
	exit 11
else
	printf "[xadf]: DONE\n"
fi

# 6. Make untracked files not shown: xadf config status.showUntrackedFiles no
printf "[xadf]: Makes untracked file not shown...\n"
git --git-dir="$install_seat" --work-tree="$HOME" config status.showUntrackedFiles no
if test $? -gt 0
then
	printf "[xadf]: FAIL\n"
	exit 12
else
	printf "[xadf]: DONE\n"
fi

# 7. Check if .bashrc exists. If exists, go to 9, else go to 8
# 8. Copy from /etc/skel/.bashrc to ~/.bashrc, and continue to 10
test ! -f "$HOME/.bashrc" && cp /etc/skel/.bashrc ~/.bashrc

# 9. If .bashrc does not contain . ~/.config/xadf/xadfrc, appends that
#    line to the end of ~/.bashrc. Note that it should at first strip all
#    comments off by piping to sed (does not modify .bashrc) and then
#    performs grep search
printf "[xadf]: Ensures xadfrc is sourced in ~.bashrc...\n"
sed 's/#.*$//' ~/.bashrc|grep "^. ~/\.config/xadf/xadfrc$"
test $? -gt 0 && printf ". ~/.config/xadf/xadfrc\n" >> ~/.bashrc
if test $? -gt 0
then
	printf "[xadf]: xadfrc is already sourced...OK\n"
else
	printf "[xadf]: xadfrc is appended to ~.bashrc...DONE\n"
fi

# 10. Builds xadfrc from $xadfmods/template-xadfrc with xadf -x (honors --seat option)
test ! -f ~/.config/xadfrc && "$0" -x
# 11. If no recipe.txt is present, builds recipe.txt with xadf -r
test ! -f ~/.config/recipe.txt && "$0" -r
}

xadf_version(){
# prints version, then exit
printf "xadf version %s\n\n" "$version"
}

xadf_show_help(){
# runs xadf -v
# prints help text, then exit
xadf -v
cat <<ENDOFFILE
  A bash script to control and manage xa-dotfiles (xadf) in a home
  folder with bare git methods. When called without its native
  arguments, act as an alias of:
    git --git-dir=\$xadfdir --work-tree=\$HOME "\$@"

USAGE

  ~$ xadf -i --seat "\$HOME/.dotfiles"
  --> installs xadf, and sets up git directory for xadf to \$HOME/.dotfiles
      instead of \$HOME/xadf

  ~$ xadf --build-xadfrc --heno
  --> generates xadfrc and save it to ~/.config/xadf/xadfrc and change upstream
      link to git@gitlab.com:heno72/xadf.git

  ~$ xadf status
  --> an alias for 'git --git-dir=\$xadfdir --work-tree\$HOME status'
      Consider it like 'git status' but with separated git directory and
      work-tree.

  Likewise, the following commands essentially function as a git alias:

  ~$ xadf commit
  ~$ xadf pull
  ~$ xadf push
  ~$ xadf checkout trunk

OPTIONS

Normal usage options:
  --list-tracked/-l [PATH]  Prints all tracked files or optionally only tracked
                            files in PATH, where PATH is relative to repository
                            root directory (supposedly \$HOME)
  --build-recipe/-r         Produces \$xadfconfig/recipe.txt by copying file
                            \$xadfmods/default-recipe.txt
  --build-xadfrc/-x         Produce \$xadfconfig/xadfrc by constructing from
                            \$xadfmods/template-xadfrc
  --heno                    Essentially an alias for:
                              xadf remote set-url origin \\
                              git@gitlab.com:heno72/xadf.git
                            WARNING: This is for my personal needs. Don't use
                            this if you don't have write access there! If so
                            desired, you can change the option or the url to
                            your own.
  --help/-h                 Display this help text and then exit
  --version/-v              Prints version and then exit

xadf installation options:
  --install/-i              Installs and sets up xa-dotfiles repositories to
                            user's \$HOME
  --seat DIR                Sets xadf git directory to DIR. Default: \$HOME/xadf
                            Is meant to be used with option --install/-i and/or
                            option --build-xadfrc/-x
  --branch/-b BRANCH        Sets active git branch in \$HOME to BRANCH. If not
                            specified, it is identical to run the script with
                            option --branch/-b trunk        Default: trunk

ENDOFFILE
# $(printf "%s\n" "$install_seat"|sed 's#$HOME#\$HOME#')                          
}

# Option parser
while :; do
	case $1 in
		# One-off options (immediately exit after matched)
		-l | --list-tree )
			# Note that it may also expect to be provided arguments, for example to
			# specify which file or directory do we want to see (just like ls in some
			# ways).
			shift
			"$0" ls-tree --full-tree -r --name-only HEAD "$@"
			exit 0
			;;
		-h | --help ) # show help text, then exit
			shift
			xadf_show_help
			exit 0
			;;
		-v | --version ) # show version, then exit
			shift
			xadf_version
			exit 0
			;;
		# Functions that modify script states but does not immediately break
		-i | --install ) # performs xadf install
			export install_mode=1
			shift
			;;
		--seat ) # set git dir to DIR
			if test -z "$2"
			then
				printf >&2 "Error: No directory is set!\nUsage: xadf -h\n\n"
				exit 1
			else
				export install_seat="$2"
				shift 2
			fi
			;;
		-b | --branch ) # sets checked out branch
			if test -z "$2"
			then
				printf >&2 "Error: No branch is set\nUsage: xadf -h\n\n"
				xadf_show_help
				exit 2
			else
				export install_branch="$2"
				shift 2
			fi
			;;
		-r | --build-recipe ) # builds recipe.txt
			export build_recipe=1
			shift
			;;
		-x | --build-xadfrc ) # builds xadfrc
			export build_xadfrc=1
			shift
			;;
		--heno ) # changes upstream url
			export is_heno=1
			break
			;;
		# general matching for all other cases
		-* ) # invalid options
			printf >&2 "Error: Invalid flag '%s'\nUsage: xadf -h\n\n" "$1"
			xadf_show_help
			shift
			exit 3
			;;
		"" ) # No options
			break
			;;
		* ) # Practically a git alias with separate git dir
			# If $xadfdir is not set, then fail
			test -n "$xadfdir" && git --git-dir="$xadfdir" --work-tree="$HOME" "$@"
			break
			;;
	esac
done

# Main section
# Check state variables, and decide what function to call.

if test $install_mode -eq 1
then
	xadf_install
fi

if test $build_recipe -eq 1
then
	xadf_build_recipe
fi

if test $build_xadfrc -eq 1
then
	xadf_build_xadfrc
fi

if test $is_heno -eq 1
then
	if test -n "$xadfdir"
	then # xadfdir is set, xadf will call itself as an alias
		"$0" remote set-url origin git@gitlab.com:heno72/xadf.git
	else # is set in installation, will call the raw commands
		git --git-dir="$install_seat" --work-tree="$HOME" remote set-url origin git@gitlab.com:heno72/xadf.git
	fi
fi
